import React, { useState } from 'react';
import {
  Modal,
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Alert,
} from 'react-native';

// Функция для отображения модального окна сохранения комикса
const saveComicModal = () => {
  const [modalVisible, setModalVisible] = useState(false); // Состояние видимости модального окна
  const [comicName, setComicName] = useState(''); // Название комикса
  const [comicIcon, setComicIcon] = useState(null); // Выбранная иконка комикса
  const [isReady, setIsReady] = useState(false); // Готовность к сохранению

  // Проверяем, заполнены ли все поля
  const checkReadiness = () => {
    if (comicName.trim() !== '' && comicIcon !== null) {
      setIsReady(true);
    } else {
      setIsReady(false);
    }
  };

  // Обработчик сохранения комикса
  const handleSaveComic = () => {
    Alert.alert('Комикс сохранен!', `Имя: ${comicName}, Иконка: ${comicIcon}`);
    setModalVisible(false); // Закрываем модальное окно
  };

  return (
    <View>
      {/* Кнопка для вызова модального окна */}
      <TouchableOpacity onPress={() => setModalVisible(true)} style={styles.openButton}>
        <Text>Сохранить комикс</Text>
      </TouchableOpacity>

      {/* Модальное окно */}
      <Modal visible={modalVisible} animationType="slide" transparent={true}>
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Сохранение комикса</Text>

            {/* Поле ввода названия комикса */}
            <TextInput
              placeholder="Введите название комикса"
              value={comicName}
              onChangeText={(text) => {
                setComicName(text);
                checkReadiness(); // Проверяем готовность после изменения текста
              }}
              style={styles.input}
            />

            {/* Выбор иконки комикса */}
            <Text style={styles.label}>Выберите иконку (1-10):</Text>
            <View style={styles.iconPicker}>
              {[...Array(10).keys()].map((icon) => (
                <TouchableOpacity
                  key={icon}
                  onPress={() => {
                    setComicIcon(icon + 1);
                    checkReadiness(); // Проверяем готовность после выбора иконки
                  }}
                  style={[
                    styles.iconButton,
                    comicIcon === icon + 1 && styles.selectedIcon,
                  ]}
                >
                  <Text>{icon + 1}</Text>
                </TouchableOpacity>
              ))}
            </View>

            {/* Кнопки "Отмена" и "Готово" */}
            <View style={styles.buttonContainer}>
              <TouchableOpacity onPress={() => setModalVisible(false)} style={styles.cancelButton}>
                <Text style={styles.cancelButtonText}>Отмена</Text>
              </TouchableOpacity>
              <TouchableOpacity
                onPress={handleSaveComic}
                disabled={!isReady}
                style={[styles.saveButton, !isReady && styles.disabledButton]}
              >
                <Text style={styles.saveButtonText}>Готово</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </View>
  );
};

// Стили
const styles = StyleSheet.create({
  openButton: {
    backgroundColor: '#4CAF50',
    padding: 10,
    borderRadius: 5,
    margin: 10,
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContent: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 10,
    width: '80%',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
    textAlign: 'center',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    marginBottom: 10,
    borderRadius: 5,
  },
  label: {
    fontSize: 14,
    marginBottom: 5,
  },
  iconPicker: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 10,
  },
  iconButton: {
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#ccc',
    margin: 5,
    borderRadius: 5,
  },
  selectedIcon: {
    backgroundColor: '#4CAF50',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  cancelButton: {
    backgroundColor: '#f44336',
    padding: 10,
    borderRadius: 5,
    flex: 1,
  },
  cancelButtonText: {
    color: '#fff',
    textAlign: 'center',
  },
  saveButton: {
    backgroundColor: '#4CAF50',
    padding: 10,
    borderRadius: 5,
    flex: 1,
  },
  saveButtonText: {
    color: '#fff',
    textAlign: 'center',
  },
  disabledButton: {
    backgroundColor: '#ccc',
  },
});

export default saveComicModal;